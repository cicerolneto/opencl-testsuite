# -*- Python -*-

import os
import sys
import lit.formats
import re

import subprocess
try:
	import json
except:
	import simplejson as json

# name: The name of this test suite.
config.name = 'opencl-trickery'

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.cl']

# excludes: A list of individual files to exclude.
config.excludes = []

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# TODO: exec root should maybe be the same that builddir
config.test_exec_root = os.path.abspath('.')

config.target_triple = '(unused)'

src_root = os.path.join(config.test_source_root, '..')

ocl_tester_exec = lit_config.params.get('OCL_TESTER', None)
if ocl_tester_exec is None: 
	print "Error: --param OCL_TESTER=<path_to_tester> is requred."
	exit(1)

config.substitutions.append(('%{src_root}', src_root))
config.substitutions.append(('%{inputs}', os.path.join(src_root, 'tests', 'Inputs')))
config.substitutions.append(('%{lit}', "%%{python} %s" % (os.path.join(src_root, 'lit.py'),)))
config.substitutions.append(('%{python}', sys.executable))

# Enable coverage.py reporting, assuming the coverage module has been installed
# and sitecustomize.py in the virtualenv has been modified appropriately.
if lit_config.params.get('check-coverage', None):
    config.environment['COVERAGE_PROCESS_START'] = os.path.join(
        os.path.dirname(__file__), ".coveragerc")

# Add a feature to detect the Python version.
config.available_features.add("python%d.%d" % (sys.version_info[0], sys.version_info[1]))

# Read DEVICE lit parameter and select platforms
run_devices_regex = lit_config.params.get('DEVICE') or '.*'
# read device list from ocl-tester
device_info = json.loads(subprocess.check_output([ocl_tester_exec, "list-devices"]))

available_devices = [(d['id'], d['platformName'] + " / " + d['deviceName'])
	for d in device_info['deviceIdentifiers'] ]

selected_devices = [dev for dev in available_devices 
	if re.search(run_devices_regex, dev[1]) is not None]		

print "######## Platforms selected with regex:",run_devices_regex,"########"
for devId,deviceStr in selected_devices:
	print devId,":",deviceStr

print "######## ----------- running the suite ----------- ########"
print ""

# NOTE: would be nice to be able to declare and run multiple test suites and make 

class ManyTests(lit.formats.ShTest):

	def getTestsInDirectory(self, testSuite, path_in_suite, litConfig, localConfig):
		"""Extend ShTest to generate separate test instance for each selected OpenCL device.

		TODO: looks that this does not work perfectly yet. When running tests in many test suites
		      test system exits before some errors are reported...
		"""

		# print "Read device info:", device_info
		# print "Available devices:",available_devices
		# print "Selected devices:",selected_devices 
		# print "Lit config",litConfig.__dict__
		# print "Local config",localConfig,localConfig.__dict__

		for device_id,device_name in selected_devices:

			# make copy of lit config and test suite to each device
			# to be able to set different device name for substitutions
			deviceConfig = lit.TestingConfig.TestingConfig(localConfig,
				localConfig.name + " (" + device_name + ")",
				localConfig.suffixes,
				localConfig.test_format,
				localConfig.environment,
				[i for i in localConfig.substitutions] + [('%{device}', device_name), ('%{device_id}', str(device_id)), ('%{ocl_tester}', ocl_tester_exec)],
				localConfig.unsupported,
				localConfig.test_exec_root,
				localConfig.test_source_root,
				localConfig.excludes,
				localConfig.available_features,
				localConfig.pipefail)

			deviceSuite = lit.Test.TestSuite(
				'Suite: ' + device_name, 
				testSuite.source_root,
				testSuite.exec_root,
				deviceConfig)


			for i in lit.formats.ShTest.getTestsInDirectory(
				self, deviceSuite, path_in_suite, litConfig, deviceConfig):
				yield i

# testFormat: The test format to use to interpret tests.
config.test_format = ManyTests(execute_external=True)

